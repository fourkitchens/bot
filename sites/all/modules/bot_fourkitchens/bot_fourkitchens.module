<?php

/**
 * @file
 * Enables a collection of hot tricks and sweet 
 * licks for the Four Kitchens IRC chan.
 */

/**
 * Implemetation of hook_irc_listeners().
 *
 * Required:
 *  - callback: The function to call when a message is received that matches this listener.
 *
 * Optional:
 *  - title: The title of the listener
 *  - data: Set to TRUE if you want to collect data in the admin settings.
 *  - whitelist: An array of channels to listen to. Leave empty to whitelist all channels.
 *  - blacklist: An array of channels to ignore.  Overrides whitelist.
 *  - probability: The probability that the callback will be executed.  Defaults to 100.
 *
 */
function bot_fourkitchens_irc_listeners() {
  $items = array();
  
  $items['/^\?summon\s(.*)$/i'] = array(
    'title' => 'Summon everyone.',
    'callback' => 'bot_fourkitchens_summon',
  );
  $items['/(\w+)-\d+/i'] = array(
    'title' => 'Jira projects',
    'callback' => 'bot_fourkitchens_jira',
    'data' => TRUE,
  );
  $items['/^\?g\s(.*)$/i'] = array(
    'title' => 'Search Google',
    'callback' => 'bot_fourkitchens_google',
  );
  $items['/^\?ud/i'] = array(
    'title' => 'Search Urban Dictionary',
    'callback' => 'bot_fourkitchens_urban_dictionary',
  );
  $items['/^\?weather\s+(.*)$/i'] = array(
    'title' => 'Get the current weather',
    'callback' => 'bot_fourkitchens_weather',
  );
  $items['/^\?wwjd/i'] = array(
    'title' => 'What would Jen-nay do?',
    'callback' => 'bot_fourkitchens_jenny',
    'data' => TRUE,
  );
  $items['/food|hungry|taco|hangry/i'] = array(
    'title' => 'Tacos!',
    'callback' => 'bot_fourkitchens_tacos',
    'probability' => 10,
    'whitelist' => array('#fourkitchens'),
    'data' => TRUE,
  );
  $items['/no (more)? tacos|t (want|like|want to eat) (any)? tacos/i'] = array(
    'title' => 'No tacos!',
    'callback' => 'bot_fourkitchens_no_tacos',
    'probability' => 10,
    'whitelist' => array('#fourkitchens'),
    'data' => TRUE,
  );
  $items['/breakfast/'] = array(
    'title' => 'Breakfast tacos!',
    'callback' => 'bot_fourkitchens_breakfast',
    'probability' => 10,
    'whitelist' => array('#fourkitchens'),
    'data' => TRUE,
  );
  $items['/((Jenny.*?number)|(number.*?Jenny)|(call.*?Jenny))/'] = array(
    'title' => "Jenny we've got your number.",
    'callback' => 'bot_fourkitchens_jennys_number',
    'whitelist' => array('#fourkitchens'),
    'probability' => 50,
  );
  $items['/beer/'] = array(
    'title' => "Beer",
    'callback' => 'bot_fourkitchens_beer',
    'whitelist' => array('#fourkitchens'),
    'probability' => 20,
    'data' => TRUE,
  );
  
  return $items;
}

/**
 * Build an array of all IRC listeners.
 */
function bot_fourkitchens_get_listeners($reset = FALSE) {
  static $all_listeners;
  
  $defaults = array(
    'title' => '',
    'description' => '',
    'whitelist' => array(),
    'blacklist' => array(),
    'data' => FALSE,
    'probability' => 100,
  );
  
  if (!isset($listeners) || $reset) {
    $all_listeners = array();
    foreach (module_implements('irc_listeners') as $module) {
      $listeners = call_user_func($module . '_irc_listeners');
      if (isset($listeners) && is_array($listeners)) {
        foreach (array_keys($listeners) as $regex) {
          $listeners[$regex] = array_merge($defaults, $listeners[$regex]);
          $listeners[$regex]['module'] = $module;
        }
        $all_listeners = array_merge($all_listeners, $listeners);
      }
    }
    
    drupal_alter('irc_listeners', $all_listeners);
  }
  
  return $all_listeners;
}

/**
 * Route a message to its listeners.
 */
function bot_fourkitchens_route_listeners($to, $data) {
  include_once 'bot_fourkitchens.listeners.inc';
  
  foreach (bot_fourkitchens_get_listeners() as $regex => $info) {
    $matches = array();
    echo "preg_match($regex, $data->message, $matches);\n";
    preg_match($regex, $data->message, $matches);
    if (count($matches)) {
      // Enforce whitelist of present.
      if (count($info['whitelist'])) {
        if (!in_array($data->channel, $info['whitelist'])) {
          echo "No whitelisted\n";
          continue;
        }
      }
      
      // Enforce blacklist if present.
      if (count($info['blacklist'])) {
        if (in_array($data->channel, $info['whitelist'])) {
          echo "Blacklisted\n";
          continue;
        }
      }
      
      $rand = rand(0, 100);
      if ($info['probability'] == 100 || $rand <= $info['probability']) {
        echo "Calling " . $info['callback'] . "\n";
        call_user_func_array($info['callback'], array($to, $data, $matches));
      }
      else {
        echo "Failed probability test.  Rolled a $rand, needed a " . $info['probability'];
      }
    }
  }
}

/**
 * Get stored data for an IRC listener.
 */
function bot_fourkitchens_listener_data() {
  $backtrace = debug_backtrace();
  $data = variable_get($backtrace[1]['function'], '' );
  return preg_split('/\\r?\\n/', $data);
}

/**
 * Implementation of hook_menu().
 */
function bot_fourkitchens_menu() {
  $items = array();

  $items['admin/settings/bot_fourkitchens'] = array(
    'title' => 'Bot Four Kitchens Settings',
    'description' => 'Tame your Four Kitchens bot.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bot_fourkitchens_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Settings form.
 */
function bot_fourkitchens_admin($form) {
  $form = array();
  
  foreach (bot_fourkitchens_get_listeners() as $regex => $info) {
    if ($info['data']) {
      $form[$info['callback']] = array(
        '#type' => 'textarea',
        '#title' => $info['title'],
        '#default_value' => variable_get($info['callback'], ''),
        '#description' => $info['description'] ? $info['description'] : $regex,
        '#required' => FALSE,
      );
    }
  }

  return system_settings_form($form);
}

/**
 * Listen for all sorts of stuff
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_fourkitchens_irc_msg_channel($data, $from_query = FALSE) {
  $to = $from_query ? $data->nick : $data->channel;
  bot_fourkitchens_route_listeners($to, $data);
}

/**
 * All responses are available via a query.
 */
function bot_fourkitchens_irc_msg_query($data) {
  bot_fourkitchens_irc_msg_channel($data, TRUE);
}

function bot_fourkitchens_include_simple_html_dom() {
  static $included = FALSE;
  if (!$included) {
    include 'simple_html_dom.php';
    $included = TRUE;
  }
}
