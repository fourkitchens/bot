<?php
// $Id: bot_karma.module,v 1.1.2.7 2010/10/21 12:51:36 morbus Exp $

/**
 * @file
 * Enables positive and negative tracking of words and phrases.
 */

/**
 * Implementation of hook_help().
 */
function bot_karma_help($section) {
  switch ($section) {
    case 'irc:features':
      return array(t('Karma'));
    case 'irc:features#karma':
      return t('Keeps track of "karma" altered by "foo++" or "bar--". Terms must be 3 to 15 characters in length. "BOTNAME: karma foo?" gives the current karma score. Highest and lowest karma scores can be seen at <!url>.', array('!url' => url('bot/karma', array('absolute' => TRUE))));
    case 'bot/karma':
      return '<p>' . t('View the highest and lowest karma scores earned from IRC.') . '</p>';
    case 'admin/settings/bot/karma':
      return '<p>' . t('Configure karma responses with these settings.') . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function bot_karma_menu() {
  $items['bot/karma'] = array(
    'access arguments'  => array('access bot karma scores'),
    'description'       => 'View the highest and lowest karma scores earned from IRC.',
    'page callback'     => 'bot_karma_overview',
    'title'             => 'Karma',
  );
  $items['admin/settings/bot/karma'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure karma responses with these settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_karma_settings'),
    'title'             => 'Bot Karma',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function bot_karma_perm() {
  return array('access bot karma scores');
}

/**
 * Listen for conversation directed at, or around, the bot.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_karma_irc_msg_channel($data, $from_query = FALSE) {
  $to = $from_query ? $data->nick : $data->channel;
  $addressed = bot_name_regexp();

  // addressing is required. "bot_module: karma foo?".
  if (preg_match("/^${addressed}karma\s+(.*?)[!\?\.]*\s*$/i", $data->message, $matches)) {
    $result = db_fetch_object(db_query("SELECT term, karma FROM {bot_karma} WHERE term = '%s'", trim(drupal_strtolower($matches[2]))));
    $karma = $result->term ? $result->karma : 0; // instead of saying "no results", everything has a karma of 0. it's true! life sucks.
    bot_message($to, t('!term has karma of !karma.', array('!term' => trim($matches[2]), '!karma' => $karma))); // maintain user case!
  }

  // someone has affected the cosmos! modify the karma!
  elseif (preg_match("/^($addressed)?(.*?)(\+\+|--)$/", $data->message, $matches)) {
    $term = trim(drupal_strtolower($matches[3])); // always store it lowercase.
    if (strlen($term) < 3 || strlen($term) > 15) { return; } // skip odd sizes.

    // a user has tried to karma themselves.
    if (drupal_strtolower($data->nick) == $term) {
      $substitutions = array('!who' => $data->nick, '!channel' => $data->channel);
      bot_message($to, bot_randomized_choice($substitutions, variable_get('bot_karma_self_responses', _bot_karma_self_responses())));
      return;
    }

    // load in the karma item, if it exists, then increment or decrement its value. bOOOroiIIng.
    $result = db_fetch_object(db_query("SELECT term, karma FROM {bot_karma} WHERE term = '%s'", $term));
    $result->karma = ($matches[4] == '++') ? $result->karma + 1 : $result->karma - 1;

    if (!$result->term) {
      $result->term = $term;
      drupal_write_record('bot_karma', $result);
    }
    else {
      drupal_write_record('bot_karma', $result, 'term');
    }
  }
}

/**
 * All responses are available via a query.
 */
function bot_karma_irc_msg_query($data) {
  bot_karma_irc_msg_channel($data, TRUE);
}

/**
 * Display top ten lists of the highest and lowest karma scores.
 */
function bot_karma_overview() {
  $output = NULL; $headers = array(t('Term'), t('Karma'));

  foreach (array('highest' => 'DESC', 'lowest' => 'ASC') as $type => $order) {
    $output .= '<h2>' . t('!type karma', array('!type' => drupal_ucfirst($type))) . '</h2>';
    $results = db_query_range('SELECT term, karma FROM {bot_karma} ORDER BY karma ' . $order, 0, 10);
    $rows = array(); // filled with chocolately goodness.
    while ($result = db_fetch_object($results)) { // and a nougat center?
      $rows[] = array(check_plain($result->term), check_plain($result->karma));
    } // ok, no nougat center, but lots of whip cream. MmMmM, Cool Whip. Delish.
    $output .= theme('table', $headers, $rows, array('id' => 'karma-' . $type));
  }

  return $output;
}

/**
 * Configures karma responses.
 */
function bot_karma_settings() {
  $form['#prefix'] = t('The following variables are available for use in responses: !who, !channel.');

  $form['bot_karma_self_responses'] = array(
    '#default_value' => variable_get('bot_karma_self_responses', _bot_karma_self_responses()),
    '#description'   => t('List the randomized responses, one per line, when a user attempts to karma themselves.'),
    '#title'         => t('Self-karma responses'),
    '#type'          => 'textarea',
  );

  return system_settings_form($form);
}

/**
 * Returns the default list of self-karma responses.
 */
function _bot_karma_self_responses() {
  return implode("\n", array(
    'Nice try, !who.',
    '!who: Erm... No.',
    'Did litwol put you up to this?',
    'MmMMhmm. Right. You just k... /me sighs.',
    "Oh, you're one of those sorts of humans, eh?",
    '!channel, !channel! Look what !who just tried to do!',
  ));
}

